!function (t) { var e = {}; function n(o) { if (e[o]) return e[o].exports; var r = e[o] = { i: o, l: !1, exports: {} }; return t[o].call(r.exports, r, r.exports, n), r.l = !0, r.exports } n.m = t, n.c = e, n.d = function (t, e, o) { n.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: o }) }, n.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, n.t = function (t, e) { if (1 & e && (t = n(t)), 8 & e) return t; if (4 & e && "object" == typeof t && t && t.__esModule) return t; var o = Object.create(null); if (n.r(o), Object.defineProperty(o, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var r in t) n.d(o, r, function (e) { return t[e] }.bind(null, r)); return o }, n.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return n.d(e, "a", e), e }, n.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, n.p = "", n(n.s = 0) }([function (t, e, n) { "use strict"; n.r(e); var o = function (t, e, n) { Object.defineProperty(t, n, { get: () => t[e][n], set(o) { t[e][n] = o } }) }; var r = function (t) { for (let e = 0; e < t.length; e++)f(t[e]) }; function i(t, e, n) { f(n), Object.defineProperty(t, e, { get: function () { return console.log("获取", n), n }, set: function (t) { console.log("设置", t), t !== n && (f(n), n = t) } }) } const c = Array.prototype.slice, s = Array.prototype, u = Object.create(s); function l(t) { Array.isArray(t) ? (t.__proto__ = u, r(t)) : this.walk(t) } ["push", "pop", "shift", "unshift", "splice", "sort", "reverse"].forEach((function (t) { const e = s[t]; u[t] = function () { let n, o = c.call(arguments); const i = e.apply(this, o); switch (t) { case "push": case "unshift": n = o; break; case "splice": n = o.slice(2) }return n && r(n), i } })), l.prototype.walk = function (t) { const e = Object.keys(t); for (let n = 0; n < e.length; n++) { const o = e[n]; i(t, o, t[o]) } }; var f = function (t) { var e; if (null !== (e = t) && "object" == typeof e) return new l(t) }; function a(t) { t.$options.data && function (t) { let e = t.$options.data; for (var n in e = t.$data = "function" == typeof e ? e.call(t) : e || {}, e) o(t, "$data", n); f(t.$data) }(t) } const p = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/, d = "[a-zA-Z_][\\-\\.0-9_a-zA-Z]*", h = `((?:${d}\\:)?${d})`, y = new RegExp("^<" + h), g = /^\s*(\/?)>/, m = new RegExp(`^<\\/${h}[^>]*>`); function $(t) { const e = []; let n, o, r; for (; t;) { let e = t.indexOf("<"); if (0 === e) { const e = i(); if (console.log("解析——开始标签——结果", e), e) { s(e.tagName, e.attrs); continue } const n = t.match(m); if (n) { c(n[0].length), u(n[1]); continue } } e > 0 && (o = t.substring(0, e)), o && (c(o.length), l(o)) } function i() { const e = t.match(y); let n, o; if (e) { const r = { tagName: e[1], attrs: [] }; for (c(e[0].length); !(n = t.match(g)) && (o = t.match(p));)r.attrs.push({ name: o[1], value: o[3] || o[4] || o[5] }), c(o[0].length); if (n) return c(n[0].length), r } } function c(e) { t = t.substring(e) } function s(t, o) { const i = function (t, e) { return { tag: t, type: 1, children: [], attrs: e, parent: parent } }(t, o); n || (n = i), r = i, e.push(i) } function u(t) { const n = e.pop(); r = e[e.length - 1], r && (n.parent = r, r.children.push(n)) } function l(t) { (t = t.trim()).length > 0 && r.children.push({ type: 3, text: t }) } return n } const v = /\{\{((?:.|\r?\n)+?)\}\}/g; function b(t) { const e = function (t) { const e = t.children; if (e.length) return e.map(t => function (t) { if (1 === t.type) return b(t); if (3 === t.type) { let e, n, o = [], r = t.text, i = v.lastIndex = 0; if (!v.test(r)) return `_v(${JSON.stringify(r)})`; for (; e = v.exec(r);)n = e.index, n > i && o.push(JSON.stringify(r.slice(i, n))), o.push(`_s(${e[1].trim()})`), i = n + e[0].length; return i < r.length && o.push(JSON.stringify(r.slice(i))), `_v(${o.join("+")})` } }(t)).join(",") }(t); return `_c('${t.tag}', ${t.attrs.length > 0 ? "" + function (t) { let e = ""; for (let n = 0; n < t.length; n++) { let o = t[n]; if ("style" === o.name) { let t = {}; o.value.split(";").map(e => { let [n, o] = e.split(":"); n && (t[n] = o) }), o.value = t } e += `${o.name}:${JSON.stringify(o.value)},` } return `{${e.slice(0, -1)}}` }(t.attrs) : "undefined"}${e ? "," + e : ""})` } function _(t, e) { let n = function t(e) { const { tag: n, props: o, children: r, text: i } = e; "string" == typeof n ? (e.el = document.createElement(n), function (t) { const e = t.el, n = t.props || {}; for (let t in n) if ("style" === t) for (let t in n.style) e.style[t] = n.style[t]; else "class" === t ? e.className = e.class : e.setAttribute(t, n[t]) }(e), r.map(n => { e.el.appendChild(t(n)) })) : e.el = document.createTextNode(i); return e.el }(e), o = t.parentNode; o.insertBefore(n, t.nextSibling), o.removeChild(t) } function x(t, e = {}, ...n) { return O(t, e, n) } function O(t, e, n, o) { return { tag: t, props: e, children: n, text: o } } function j(t) { this._init(t) } var S; (S = j).prototype._init = function (t) { const e = this; e.$options = t, a(e), e.$options.el && e.$mount(e.$options.el) }, S.prototype.$mount = function (t) { const e = this, n = e.$options; if (!n.render) { let o = n.template; t && !o && (e.$el = document.querySelector(t), o = e.$el.outerHTML); const r = function (t) { const e = $(t); console.log("生成 AST 语法树", e); const n = b(e); return console.log("AST 转换成函数字符串", n), new Function(`with(this){ return ${n} }`) }(o); n.render = r } !function (t) { t._update(t._render()) }(e) }, function (t) { t.prototype._update = function (t) { _(this.$el, t) } }(j), function (t) { t.prototype._c = function () { return x(...arguments) }, t.prototype._s = function (t) { if (null !== t) return "object" == typeof t ? JSON.stringify(t) : t }, t.prototype._v = function (t) { return function (t) { return O(void 0, void 0, void 0, t) }(t) }, t.prototype._render = function () { return this.$options.render.call(this) } }(j); const N = new j({ el: "#app", data: () => ({ tip: "搞定", studentNum: 1, subject: ["历史", "文化"], bookInfo: { name: "三国演义", author: { name: "罗贯中", age: 18 } }, studentList: [{ id: 1, name: "小明" }] }) }); console.log("vm实例", N), N.studentList.push({ id: 2, name: "葡萄" }), console.log(N.studentList, "几个人") }]);
//# sourceMappingURL=bundle.js.map